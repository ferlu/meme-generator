{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","generateImage","fetch","then","response","json","memes","data","setState","e","target","name","value","this","preventDefault","imageIndex","Math","floor","random","newImage","url","className","type","placeholder","onChange","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAceA,MAdf,WACE,OACE,8BACE,mCACE,qBACEC,IAAI,iEACJC,IAAI,aAEN,qD,0CCgEOC,E,kDArEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBATT,E,qDAYd,WAAqB,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAc,IACbE,EAAUF,EAASG,KAAnBD,MACN,EAAKE,SAAS,CACZV,YAAaQ,S,0BAKrB,SAAaG,GAAI,IAAD,EACQA,EAAEC,OAAlBC,EADQ,EACRA,KAAMC,EADE,EACFA,MACZC,KAAKL,SAAL,eACGG,EAAOC,M,2BAIZ,SAAcH,GACZA,EAAEK,iBACF,IAAIC,EAAaC,KAAKC,MAAM,IAAAD,KAAKE,UAAwB,EACrDC,EAAWN,KAAKnB,MAAMI,YAAYiB,GAAYK,IAClDP,KAAKL,SAAS,CACZX,UAAWsB,M,oBAIf,WACE,OACE,gCACE,uBAAME,UAAU,YAAhB,UACE,uBACEC,KAAK,OACLX,KAAK,UACLC,MAAOC,KAAKnB,MAAMC,QAClB4B,YAAY,WACZC,SAAUX,KAAKd,eAEjB,uBACEuB,KAAK,OACLX,KAAK,aACLC,MAAOC,KAAKnB,MAAME,WAClB2B,YAAY,cACZC,SAAUX,KAAKd,eAEjB,wBAAQ0B,QAASZ,KAAKZ,cAAtB,oBAEF,sBAAKoB,UAAU,OAAf,UACE,qBAAK9B,IAAKsB,KAAKnB,MAAMG,UAAWL,IAAI,mBACpC,oBAAI6B,UAAU,MAAd,SAAqBR,KAAKnB,MAAMC,UAChC,oBAAI0B,UAAU,SAAd,SAAwBR,KAAKnB,MAAME,uB,GA/DjB8B,IAAMC,WCWnBC,MATf,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f0c2f1f4.chunk.js","sourcesContent":["function Header() {\n  return (\n    <div>\n      <header>\n        <img\n          src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n          alt=\"problem?\"\n        />\n        <p>Meme generator</p>\n      </header>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.generateImage = this.generateImage.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((response) => {\n        let { memes } = response.data;\n        this.setState({\n          allMemeImgs: memes,\n        });\n      });\n  }\n\n  handleChange(e) {\n    let { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  generateImage(e) {\n    e.preventDefault();\n    let imageIndex = Math.floor(Math.random() * (100 - 0)) + 0;\n    let newImage = this.state.allMemeImgs[imageIndex].url;\n    this.setState({\n      randomImg: newImage,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"meme-form\">\n          <input\n            type=\"text\"\n            name=\"topText\"\n            value={this.state.topText}\n            placeholder=\"Top Text\"\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"bottomText\"\n            value={this.state.bottomText}\n            placeholder=\"Bottom Text\"\n            onChange={this.handleChange}\n          />\n          <button onClick={this.generateImage}>Gen</button>\n        </form>\n        <div className=\"meme\">\n          <img src={this.state.randomImg} alt=\"generated meme\" />\n          <h2 className=\"top\">{this.state.topText}</h2>\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport MemeGenerator from \"./components/MemeGenerator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}